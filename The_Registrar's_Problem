import math
from collections import deque
import heapq

def bestfs(initial_value, target_value):
    heap = [(0, initial_value, [])] 
    visited = set()

    while heap:
        cost, current_value, actions = heapq.heappop(heap)

        if current_value == target_value:
            return actions

        if current_value not in visited:
            visited.add(current_value)

            double_result = current_value * 2
            increase_result = current_value + 1
            half_result = current_value // 2
            decrease_result = current_value - 1
            square_result = square(current_value)
            root_result = root(current_value)

            if double_result <= 1000000000:
                heapq.heappush(heap, (cost + 2, double_result, actions + ["double"]))
            heapq.heappush(heap, (cost + 2, increase_result, actions + ["increase"]))
            if half_result >= 0.2:
                heapq.heappush(heap, (cost + 2, half_result, actions + ["half"]))
            heapq.heappush(heap, (cost + 2, decrease_result, actions + ["decrease"]))
            if square_result <= 1000000000:
                heapq.heappush(heap, (cost + 2, square_result, actions + ["square"]))
            if root_result >= 0.2:
                heapq.heappush(heap, (cost + 2, root_result, actions + ["root"]))

    return None

def root(x):
    if x < 0:
        return 0
    return int(x**0.5)

def square(x):
    return x ** 2

def heuristic(current_value, target_value):
    return abs(current_value - target_value)

def dfs_wrapper(initial_value, target_value):
    visited = set()
    result = dfs(initial_value, target_value)
    print(result)

def dfs(initial_value, target_value):
    stack = [(initial_value, [])]
    visited = set()

    while stack:
        current_value, actions = stack.pop()

        if current_value == target_value:
            return actions

        if current_value not in visited:
            visited.add(current_value)

            double_result = current_value * 2
            increase_result = current_value + 1
            half_result = current_value // 2
            decrease_result = current_value - 1
            square_result = square(current_value)
            root_result = root(current_value)

            if double_result <= 1000000000:
                stack.append((double_result, actions + ["double"]))
            if increase_result <= 1000000000:
                stack.append((increase_result, actions + ["increase"]))
            if half_result >= 0.2:
                stack.append((half_result, actions + ["half"]))
            if decrease_result >= 0:
                stack.append((decrease_result, actions + ["decrease"]))
            if square_result <= 1000000000:
                stack.append((square_result, actions + ["square"]))
            if root_result >= 0.2:
                stack.append((root_result, actions + ["root"]))

    return None

def astar(initial_value, target_value):
    heap = [(0, initial_value, [])]
    visited = set()

    while heap:
        cost, current_value, actions = heapq.heappop(heap)

        if current_value == target_value:
            return actions

        if current_value not in visited:
            visited.add(current_value)

            if current_value * 2 <= 1000000000:
                heapq.heappush(heap, (cost + 2 + heuristic(current_value * 2, target_value), current_value * 2, actions + ["double"]))
            heapq.heappush(heap, (cost + 2 + heuristic(current_value + 1, target_value), current_value + 1, actions + ["increase"]))
            if current_value / 2 >= 0.2:
                heapq.heappush(heap, (cost + 2 + heuristic(current_value / 2, target_value), current_value / 2, actions + ["half"]))
            heapq.heappush(heap, (cost + 2 + heuristic(current_value - 1, target_value), current_value - 1, actions + ["decrease"]))

    return None

def bfs(initial_value, target_value):
    queue = [(initial_value, [])]
    visited = set()

    while queue:
        current_value, actions = queue.pop(0)

        if current_value == target_value:
            return actions

        if current_value not in visited:
            visited.add(current_value)

            double_result = current_value * 2
            increase_result = current_value + 1
            half_result = current_value // 2
            decrease_result = current_value - 1
            square_result = square(current_value)
            root_result = root(current_value)

            if double_result <= 1000000000:
                queue.append((double_result, actions + ["double"]))
            queue.append((increase_result, actions + ["increase"]))
            if half_result >= 0.2:
                queue.append((half_result, actions + ["half"]))
            queue.append((decrease_result, actions + ["decrease"]))
            if square_result <= 1000000000:
                queue.append((square_result, actions + ["square"]))
            if root_result >= 0.2:
                queue.append((root_result, actions + ["root"]))

    return None

def main():
    algorithm_choice = input("Επιλέξτε αλγόριθμο (BFS, BestFS, ASTAR, DFS): ").lower()

    if algorithm_choice not in ["bfs", "bestfs", "astar", "dfs"]:
        print("Μη έγκυρη επιλογή αλγορίθμου.")
        return

    initial_value = float(input("Εισαγωγή αρχικής τιμής: "))
    target_value = float(input("Εισαγωγή τιμής στόχου: "))

    if algorithm_choice == "bfs":
        result = bfs(initial_value, target_value)
    elif algorithm_choice == "bestfs":
        result = bestfs(initial_value, target_value)
    elif algorithm_choice == "astar":
        result = astar(initial_value, target_value)
    else:
        result = dfs_wrapper(initial_value, target_value)

    if result:
        print("Πράξεις:", result)
        print("Κόστος:", len(result) * 2)
    else:
        print("Δεν υπάρχει λύση.")

if __name__ == "__main__":
    main()
